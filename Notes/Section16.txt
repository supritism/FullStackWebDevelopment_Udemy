Section 16 - The Document Object Model [DOM] 

Adding JS to websites
Three ways : 
- Inline (not recommended much)
- Internal
- External

JS is usually added in HTML’s <body> ….</body> section just before closing the </body> tag as this needs the HTML elements to be created before it can add JS actions on them.

Example of creating JS inline : 
<body onload=“alert(‘Hello’);”>
	<h1>Hello</h1>
</body>

Example of creating internal JS : 
<body>
	<h1>Hello</h1>

<script type=“text/javascript”>
	alert(“Hello”);
</script>
</body>

Example of creating external JS : 
<body>
	<h1>Hello</h1>

<script src="index.js" charset="utf-8"></script>
</body>

Then in index.js file add all your JS commands. 
—————————————————————————————
Introduction to the DOM (Document Object Model) 

- If we want our website to be interactive then we need to change part of our website on the fly. For example if a user clicks on a button then we need to respond to that by changing the appearance of our website or contents.
- Install a HTML tree Generator which is a Chrome plugin which helps us to visualize what the browser does when it turns our HTML code into a DOM tree.
** See image : Section16_img1.png **￼

- Objects inside our DOM can have ‘Properties’ and ‘Methods’. Properties describe something about the Object and Methods are the things the object can do. 
    - Get Property : car.colour;
    - Set Property : car.numberOfDoors = 0;
    - Call Method : car.drive();
- Object like a’ button’ can have : 
    - Properties : innerHTML, style, firstChild
    - Methods : click(), appendChild(), setAttribute()

Examples of using JS in console targeting DOM objects :
- document;
    - Whole HTML doc is selected. 
- document.firstElementChild;
    - <html lang=​"en" dir=​"ltr">​<head>​…​</head>​<body>​…​</body>​</html>​
- document.firstElementChild.firstElementChild;
    - <head>….</head>
- document.firstElementChild.lastElementChild;
    - <body>…</body>
- document.firstElementChild.lastElementChild.firstElementChild;
    - <h1>Hello</h1>
- document.firstElementChild.lastElementChild.firstElementChild.innerHTML = "Good Bye!";
- document.firstElementChild.lastElementChild.firstElementChild.style.color = "Green";
- document.querySelector("li").lastElementChild; //querySelector() will select the first element it encounters matching the provided selector value
- document.querySelectorAll("li")[2].innerHTML = "Fake News!" //querySelectorAll() will select all the elements in the HTML doc that match the selector value.

——————————————————————————————
Selecting HTML elements with JS
- document.getElementById("title"); //This will give me 1 element only and so I can set changes to property directly on that.
- document.getElementsByClassName(“list”); //This will give me an array containing all items with class name ‘list’. 
    - document.getElementsByClassName("list")[1].innerHTML = "Nonsense!"; //So to set properties or get methods we need to mention the index
- document.getElementsByTagName("li"); //This too gives an array of items with mentioned tag name.
- document.querySelector("ul > li:nth-child(3)"); //Inside a querySelector we can use all selectors we use in our CSS 

——————————————————————————————-
Manipulating and Changing styles of HTML elements with JS
- Refer  https://www.w3schools.com/jsref/dom_obj_  to learn about HTML DOM style object’s properties.
    - Value of a property is specified as a string when using JavaScript.
        - Example : document.querySelectory("h1").style.visibility = "hidden";

———————————————————————————————
The Separation of Concerns : Structure vs Style vs Behavior
Separation of Concerns means that - 
- HTML is for Content/Structure of your website  only.
- CSS is to style the website. 
- JavaScript is there for functionality/behavior. 

So changing the style using JavaScript is not good practice. Style should be in CSS.

Then how to use JS to change the browser style and behavior dynamically?
- Example : We can add a class value into an element using JS’s classList and then define the style part for the class in style.css
    - Ex: document.querySelector("button").classList.add("invisible"); //adds a class named ‘invisible’ into the button element.
    - Ex: document.querySelector("button").classList.remove(“testing"); //removes a class named ‘invisible’ from the button element.
    - Ex: document.querySelector("button").classList.toggle("testing"); //toggle ‘adds’ the class if it doesn’t exist and removes it if it exists.
Then in my style.css I can have :
.invisible {
	visibility: hidden;
}

———————————————————————————————
Text Manipulation and Text Content Property
Given I have  <h1 id="title"><strong>Hello from the other side!</strong></h1> in my index.html doc inside <body> section.

Difference b/w innerHTML and textContent : 
- innerHTML will give all the HTML present between the mentioned element tag. 
    - Example : document.querySelector("h1").innerHTML; //O/P - '<strong>Hello from the other side!</strong>'
- textContent will only give the text value present in the mentioned tag. 
    - Example : document.querySelector("h1").textContent; //O/P - 'Hello from the other side!'

So using the above we can add HTML tags using JS too on the fly. Example :
- document.querySelector("h1").innerHTML = "<em>Hello<em>";

————————————————————————————————
Manipulating HTML Element Attributes
What are attributes ? - Anything that goes inside the tag except the name of the element are attributes. Like the ‘class’ name, ‘href’ in <a> link or ‘src’ in an <img> etc.

How to see all the attributes associates to an element in a DOM ?
- document.querySelector("a").attributes; //This gives all the attributes and length of array of the link element <a>

How to get an attribute value and how to set an attribute value? 
- GET : document.querySelector("a").getAttribute("href"); //o/p - 'https://www.google.com'
- SET : document.querySelector("a").setAttribute("href", "www.bing.com");
